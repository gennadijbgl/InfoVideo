//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InfoVideo.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InfoVideoContext : DbContext
    {
        public InfoVideoContext()
            : base("name=InfoVideoContext")
        {
            
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Edition> Edition { get; set; }
        public virtual DbSet<Format> Format { get; set; }
        public virtual DbSet<History> History { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Video> Video { get; set; }
    
        [DbFunction("InfoVideoContext", "GetUsersByDiscount")]
        public virtual IQueryable<GetUsersByDiscount_Result> GetUsersByDiscount(Nullable<short> discount)
        {
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUsersByDiscount_Result>("[InfoVideoContext].[GetUsersByDiscount](@Discount)", discountParameter);
        }
    
        [DbFunction("InfoVideoContext", "GetVideoByType")]
        public virtual IQueryable<GetVideoByType_Result> GetVideoByType(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetVideoByType_Result>("[InfoVideoContext].[GetVideoByType](@Type)", typeParameter);
        }
    
        public virtual int GiveUserDiscount(Nullable<int> buysCount, Nullable<int> sizeDiskount)
        {
            var buysCountParameter = buysCount.HasValue ?
                new ObjectParameter("BuysCount", buysCount) :
                new ObjectParameter("BuysCount", typeof(int));
    
            var sizeDiskountParameter = sizeDiskount.HasValue ?
                new ObjectParameter("SizeDiskount", sizeDiskount) :
                new ObjectParameter("SizeDiskount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GiveUserDiscount", buysCountParameter, sizeDiskountParameter);
        }
    }
}
