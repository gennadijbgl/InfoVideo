//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InfoVideo.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InfoVideoContext : DbContext
    {
        public InfoVideoContext()
            : base("name=InfoVideoContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Edition> Edition { get; set; }
        public virtual DbSet<Format> Format { get; set; }
        public virtual DbSet<History> History { get; set; }
        public virtual DbSet<LogTable> LogTable { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Video> Video { get; set; }
    
        [DbFunction("InfoVideoContext", "GetUsersByDiscount")]
        public virtual IQueryable<GetUsersByDiscount_Result> GetUsersByDiscount(Nullable<short> discount)
        {
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUsersByDiscount_Result>("[InfoVideoContext].[GetUsersByDiscount](@Discount)", discountParameter);
        }
    
        [DbFunction("InfoVideoContext", "GetVideoByType")]
        public virtual IQueryable<GetVideoByType_Result> GetVideoByType(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetVideoByType_Result>("[InfoVideoContext].[GetVideoByType](@Type)", typeParameter);
        }
    
        public virtual ObjectResult<EditionAll_Result> EditionAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EditionAll_Result>("EditionAll");
        }
    
        public virtual int EditionDelete(Nullable<int> id, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditionDelete", idParameter, errorMessage);
        }
    
        public virtual int EditionInsert(Nullable<int> idVideo, Nullable<int> idFormat, Nullable<decimal> price, string box, ObjectParameter errorMessage)
        {
            var idVideoParameter = idVideo.HasValue ?
                new ObjectParameter("IdVideo", idVideo) :
                new ObjectParameter("IdVideo", typeof(int));
    
            var idFormatParameter = idFormat.HasValue ?
                new ObjectParameter("IdFormat", idFormat) :
                new ObjectParameter("IdFormat", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var boxParameter = box != null ?
                new ObjectParameter("Box", box) :
                new ObjectParameter("Box", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditionInsert", idVideoParameter, idFormatParameter, priceParameter, boxParameter, errorMessage);
        }
    
        public virtual int EditionUpdate(Nullable<int> id, Nullable<int> idVideo, Nullable<int> idFormat, Nullable<decimal> price, string box, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idVideoParameter = idVideo.HasValue ?
                new ObjectParameter("IdVideo", idVideo) :
                new ObjectParameter("IdVideo", typeof(int));
    
            var idFormatParameter = idFormat.HasValue ?
                new ObjectParameter("IdFormat", idFormat) :
                new ObjectParameter("IdFormat", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var boxParameter = box != null ?
                new ObjectParameter("Box", box) :
                new ObjectParameter("Box", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditionUpdate", idParameter, idVideoParameter, idFormatParameter, priceParameter, boxParameter, errorMessage);
        }
    
        public virtual ObjectResult<FormatAll_Result> FormatAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FormatAll_Result>("FormatAll");
        }
    
        public virtual int FormatDelete(Nullable<int> id, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormatDelete", idParameter, errorMessage);
        }
    
        public virtual int FormatInsert(string container, string languages, Nullable<bool> support3D, ObjectParameter errorMessage)
        {
            var containerParameter = container != null ?
                new ObjectParameter("Container", container) :
                new ObjectParameter("Container", typeof(string));
    
            var languagesParameter = languages != null ?
                new ObjectParameter("Languages", languages) :
                new ObjectParameter("Languages", typeof(string));
    
            var support3DParameter = support3D.HasValue ?
                new ObjectParameter("Support3D", support3D) :
                new ObjectParameter("Support3D", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormatInsert", containerParameter, languagesParameter, support3DParameter, errorMessage);
        }
    
        public virtual int FormatUpdate(Nullable<int> id, string container, string languages, Nullable<bool> support3D, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var containerParameter = container != null ?
                new ObjectParameter("Container", container) :
                new ObjectParameter("Container", typeof(string));
    
            var languagesParameter = languages != null ?
                new ObjectParameter("Languages", languages) :
                new ObjectParameter("Languages", typeof(string));
    
            var support3DParameter = support3D.HasValue ?
                new ObjectParameter("Support3D", support3D) :
                new ObjectParameter("Support3D", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormatUpdate", idParameter, containerParameter, languagesParameter, support3DParameter, errorMessage);
        }
    
        public virtual int GiveUserDiscount(Nullable<int> buysCount, Nullable<int> sizeDiskount)
        {
            var buysCountParameter = buysCount.HasValue ?
                new ObjectParameter("BuysCount", buysCount) :
                new ObjectParameter("BuysCount", typeof(int));
    
            var sizeDiskountParameter = sizeDiskount.HasValue ?
                new ObjectParameter("SizeDiskount", sizeDiskount) :
                new ObjectParameter("SizeDiskount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GiveUserDiscount", buysCountParameter, sizeDiskountParameter);
        }
    
        public virtual ObjectResult<HistoryAll_Result> HistoryAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HistoryAll_Result>("HistoryAll");
        }
    
        public virtual int HistoryDelete(Nullable<int> id, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HistoryDelete", idParameter, errorMessage);
        }
    
        public virtual int HistoryInsert(Nullable<int> idUser, Nullable<int> idEdition, Nullable<System.DateTime> date, Nullable<decimal> price, ObjectParameter errorMessage)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(int));
    
            var idEditionParameter = idEdition.HasValue ?
                new ObjectParameter("IdEdition", idEdition) :
                new ObjectParameter("IdEdition", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HistoryInsert", idUserParameter, idEditionParameter, dateParameter, priceParameter, errorMessage);
        }
    
        public virtual int HistoryUpdate(Nullable<int> id, Nullable<int> idUser, Nullable<int> idEdition, Nullable<System.DateTime> date, Nullable<decimal> price, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(int));
    
            var idEditionParameter = idEdition.HasValue ?
                new ObjectParameter("IdEdition", idEdition) :
                new ObjectParameter("IdEdition", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HistoryUpdate", idParameter, idUserParameter, idEditionParameter, dateParameter, priceParameter, errorMessage);
        }
    
        public virtual ObjectResult<RolesAll_Result> RolesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RolesAll_Result>("RolesAll");
        }
    
        public virtual int RolesDelete(Nullable<int> id, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RolesDelete", idParameter, errorMessage);
        }
    
        public virtual int RolesInsert(string name, ObjectParameter errorMessage)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RolesInsert", nameParameter, errorMessage);
        }
    
        public virtual int RolesUpdate(Nullable<int> id, string name, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RolesUpdate", idParameter, nameParameter, errorMessage);
        }
    
        public virtual ObjectResult<UsersAll_Result> UsersAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UsersAll_Result>("UsersAll");
        }
    
        public virtual int UsersDelete(Nullable<int> id, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UsersDelete", idParameter, errorMessage);
        }
    
        public virtual int UsersInsert(Nullable<int> idRole, string login, string password, string email, string firstName, string lastName, string address, Nullable<short> discount, ObjectParameter errorMessage)
        {
            var idRoleParameter = idRole.HasValue ?
                new ObjectParameter("IdRole", idRole) :
                new ObjectParameter("IdRole", typeof(int));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UsersInsert", idRoleParameter, loginParameter, passwordParameter, emailParameter, firstNameParameter, lastNameParameter, addressParameter, discountParameter, errorMessage);
        }
    
        public virtual int UsersUpdate(Nullable<int> id, Nullable<int> idRole, string login, string password, string email, string firstName, string lastName, string address, Nullable<short> discount, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idRoleParameter = idRole.HasValue ?
                new ObjectParameter("IdRole", idRole) :
                new ObjectParameter("IdRole", typeof(int));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UsersUpdate", idParameter, idRoleParameter, loginParameter, passwordParameter, emailParameter, firstNameParameter, lastNameParameter, addressParameter, discountParameter, errorMessage);
        }
    
        public virtual ObjectResult<VideoAll_Result> VideoAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VideoAll_Result>("VideoAll");
        }
    
        public virtual int VideoDelete(Nullable<int> id, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VideoDelete", idParameter, errorMessage);
        }
    
        public virtual int VideoInsert(string title, string description, string logo, Nullable<System.DateTime> date, string genre, ObjectParameter errorMessage)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var genreParameter = genre != null ?
                new ObjectParameter("Genre", genre) :
                new ObjectParameter("Genre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VideoInsert", titleParameter, descriptionParameter, logoParameter, dateParameter, genreParameter, errorMessage);
        }
    
        public virtual int VideoUpdate(Nullable<int> id, string title, string description, string logo, Nullable<System.DateTime> date, string genre, ObjectParameter errorMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var genreParameter = genre != null ?
                new ObjectParameter("Genre", genre) :
                new ObjectParameter("Genre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VideoUpdate", idParameter, titleParameter, descriptionParameter, logoParameter, dateParameter, genreParameter, errorMessage);
        }
    }
}
